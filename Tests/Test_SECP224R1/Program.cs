// Message for signing
using Hashing.Hashing.HMAC;
using Wheel.Crypto.Elliptic.ECDSA;
using Wheel.Hashing.SHA.SHA256;
using Wheel.Hashing.SHA.SHA512;
using Wheel.Test.ECDSA;

string message = "aaa";

// Should give these results:
// SECP224R1 private key: DB395A4721E3698864A50BBDBC5D12EFDE180237713AC2A692E4349F
// SECP224R1 public key: 04C9B6C7B016E66481AD68E6D0CA25873B2AAA05114D04E378D293B51F5760C12069FC901B74079199FE3F43E95C34E930D132D7D9CBBD67FE
// SECP224R1 compressed public key: 02C9B6C7B016E66481AD68E6D0CA25873B2AAA05114D04E378D293B51F
string secret_seed = "The quick brown fox jumps over the lazy dog";
string personalization = "For signing tests";
int secret_key_number = 0;

List<string> signaturesToCheck = new()
{
};

SECPCurve curve = SECPCurve.Get_SECP224R1();
ECDSATest check = new(curve, secret_seed, personalization, secret_key_number);

check.ExpectedKeys(
    curve.name.ToString(),
    "DB395A4721E3698864A50BBDBC5D12EFDE180237713AC2A692E4349F",
    "02C9B6C7B016E66481AD68E6D0CA25873B2AAA05114D04E378D293B51F",
    "04C9B6C7B016E66481AD68E6D0CA25873B2AAA05114D04E378D293B51F5760C12069FC901B74079199FE3F43E95C34E930D132D7D9CBBD67FE"
);

check.ExpectedSignature<HMAC<SHA224>>("HMAC_SHA224", message, "303D021D00EFBE1C9CF08272025950D625242F010EE970CFF4059205BF69EC8A36021C7F2B49F031DFC0D42B46CA7C2C5AA30135A6A724A055CCF40B58B869");
check.ExpectedSignature<HMAC<SHA256>>("HMAC_SHA256", message, "303C021C3F3FDFCFD7867728782817789CCBDD62856ABA4FED330F14B9E6F429021C3F57AC1E563E796E6F06BCA55C40E2C10C320041D01B3A37F0DEF2BA");
check.ExpectedSignature<HMAC<SHA512>>("HMAC_SHA512", message, "303D021D00D51603A5B959F3F9A872918451C329C7654E6A9AE97CFF0270591E28021C0E06CE48E08D59BF47071E4404786828ADA1F318419EA994A0BAD208");

check.CheckNonDeterministic(message);
check.CheckNonDeterministic(message);
check.CheckNonDeterministic(message);

foreach (var toCheck in signaturesToCheck)
{
    check.VerifySignature(toCheck, message);
}
