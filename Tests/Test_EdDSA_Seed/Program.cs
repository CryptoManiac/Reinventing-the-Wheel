using Hashing.Hashing.HMAC;
using Wheel.Crypto.Elliptic.EdDSA;
using Wheel.Hashing.SHA.SHA256;
using Wheel.Hashing.SHA.SHA512;
using Wheel.Test.EdDSA;

// Message for signing
string message = "aaa";

// Should give these results:
// Ed25519 private key: 58B5968C488E2722C0E0F511F69BC72CDAE887CD879C6BC2CDEAD88DF6AA9869
// Ed25519 public key: 8262C50CE735D9234664BD1A90DB48BA1A23F01FC6453E82BFFA537CBEE1A1D1
string ed25519_seed = "A4E872FF25D9C8848825FADC9E0FB369E570F10075B7E20CEE2671AED3C1001A";

// Signature which has been made by this script: https://cyphr.me/ed25519_tool/ed.html
List<string> signaturesToCheckCompact = new()
{
    "E59BC96F4513CC07DC327A7F04F2DFE092AC7A77AF2109279E25B49C1A46167D4B7C4612A498B7A83AF3639FBA8C5E829A13D7055F779ABD902CC93D6C9F960B",
};

// TODO: Add some signatures
List<string> signaturesToCheckDER = new()
{
    "304502206E662B8D23262B22A672CB8D7049B4F29A29058DE2722003295AB8FBE3C3BDD8022100C5663E34FDECC7EAFB88B8DA4251F4F0FC64F28DF17A83E115FEF2E0ABE5170A",
    "3044022032ACEAB20FE72BB4C7FC37A6AB3E6DE2AF7F55E41237118B7E8AD5E19E237384022075365DFB182889B114BDBDA9071686AF11169C6963277E156BDE4C89ACDD0606",
    "304502203B0B6B7D250790BEF64BF1C58468A6F73CC13531B10DB71228BA2F7529C69186022100A0393BB2D64A2E6B2368C4F1F98E1D0C217BB6AD48847DB0296B976CB9B83102",
};

EdCurve curve = EdCurve.Get_EdCurve_SHA2();
EdDSATest check = new(curve, ed25519_seed);

check.ExpectedKeys(
    curve.name.ToString(),
    "58B5968C488E2722C0E0F511F69BC72CDAE887CD879C6BC2CDEAD88DF6AA9869",
    "8262C50CE735D9234664BD1A90DB48BA1A23F01FC6453E82BFFA537CBEE1A1D1"
);

// Must be valid, check here: https://cyphr.me/ed25519_tool/ed.html (select Ed25519 algorithm and use SHA256 hash of "aaa" as the data)
check.ExpectedCompactSignature<HMAC<SHA224>>("HMAC_SHA224", message, "6E662B8D23262B22A672CB8D7049B4F29A29058DE2722003295AB8FBE3C3BDD8C5663E34FDECC7EAFB88B8DA4251F4F0FC64F28DF17A83E115FEF2E0ABE5170A");
check.ExpectedCompactSignature<HMAC<SHA256>>("HMAC_SHA256", message, "32ACEAB20FE72BB4C7FC37A6AB3E6DE2AF7F55E41237118B7E8AD5E19E23738475365DFB182889B114BDBDA9071686AF11169C6963277E156BDE4C89ACDD0606");
check.ExpectedCompactSignature<HMAC<SHA512>>("HMAC_SHA512", message, "3B0B6B7D250790BEF64BF1C58468A6F73CC13531B10DB71228BA2F7529C69186A0393BB2D64A2E6B2368C4F1F98E1D0C217BB6AD48847DB0296B976CB9B83102");

check.ExpectedDERSignature<HMAC<SHA224>>("HMAC_SHA224", message, "304502206E662B8D23262B22A672CB8D7049B4F29A29058DE2722003295AB8FBE3C3BDD8022100C5663E34FDECC7EAFB88B8DA4251F4F0FC64F28DF17A83E115FEF2E0ABE5170A");
check.ExpectedDERSignature<HMAC<SHA256>>("HMAC_SHA256", message, "3044022032ACEAB20FE72BB4C7FC37A6AB3E6DE2AF7F55E41237118B7E8AD5E19E237384022075365DFB182889B114BDBDA9071686AF11169C6963277E156BDE4C89ACDD0606");
check.ExpectedDERSignature<HMAC<SHA512>>("HMAC_SHA512", message, "304502203B0B6B7D250790BEF64BF1C58468A6F73CC13531B10DB71228BA2F7529C69186022100A0393BB2D64A2E6B2368C4F1F98E1D0C217BB6AD48847DB0296B976CB9B83102");

check.CheckNonDeterministic(message);
check.CheckNonDeterministic(message);
check.CheckNonDeterministic(message);

foreach (var toCheck in signaturesToCheckCompact)
{
    check.VerifyCompactSignature(toCheck, message);
}

foreach (var toCheck in signaturesToCheckDER)
{
    check.VerifyDERSignature(toCheck, message);
}
